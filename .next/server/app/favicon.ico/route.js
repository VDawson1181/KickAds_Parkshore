"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/favicon.ico/route";
exports.ids = ["app/favicon.ico/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Ffavicon.ico%2Froute&page=%2Ffavicon.ico%2Froute&appPaths=&pagePath=private-next-app-dir%2Ffavicon.ico&appDir=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FPS_Clone%2FKickAds_Parkshore%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FPS_Clone%2FKickAds_Parkshore&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Ffavicon.ico%2Froute&page=%2Ffavicon.ico%2Froute&appPaths=&pagePath=private-next-app-dir%2Ffavicon.ico&appDir=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FPS_Clone%2FKickAds_Parkshore%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FPS_Clone%2FKickAds_Parkshore&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var next_metadata_route_loader_filePath_2FUsers_2Fvdawson647_2FDesktop_2FKickAds_2FPS_Clone_2FKickAds_Parkshore_2Fapp_2Ffavicon_ico_isDynamicRouteExtension_0_next_metadata_route___WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! next-metadata-route-loader?filePath=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FPS_Clone%2FKickAds_Parkshore%2Fapp%2Ffavicon.ico&isDynamicRouteExtension=0!?__next_metadata_route__ */ \"(rsc)/./node_modules/next/dist/build/webpack/loaders/next-metadata-route-loader.js?filePath=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FPS_Clone%2FKickAds_Parkshore%2Fapp%2Ffavicon.ico&isDynamicRouteExtension=0!?__next_metadata_route__\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/favicon.ico/route\",\n        pathname: \"/favicon.ico\",\n        filename: \"favicon\",\n        bundlePath: \"app/favicon.ico/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"next-metadata-route-loader?filePath=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FPS_Clone%2FKickAds_Parkshore%2Fapp%2Ffavicon.ico&isDynamicRouteExtension=0!?__next_metadata_route__\",\n    nextConfigOutput,\n    userland: next_metadata_route_loader_filePath_2FUsers_2Fvdawson647_2FDesktop_2FKickAds_2FPS_Clone_2FKickAds_Parkshore_2Fapp_2Ffavicon_ico_isDynamicRouteExtension_0_next_metadata_route___WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/favicon.ico/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Ffavicon.ico%2Froute&page=%2Ffavicon.ico%2Froute&appPaths=&pagePath=private-next-app-dir%2Ffavicon.ico&appDir=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FPS_Clone%2FKickAds_Parkshore%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FPS_Clone%2FKickAds_Parkshore&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-metadata-route-loader.js?filePath=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FPS_Clone%2FKickAds_Parkshore%2Fapp%2Ffavicon.ico&isDynamicRouteExtension=0!?__next_metadata_route__":
/*!*********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-metadata-route-loader.js?filePath=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FPS_Clone%2FKickAds_Parkshore%2Fapp%2Ffavicon.ico&isDynamicRouteExtension=0!?__next_metadata_route__ ***!
  \*********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   dynamic: () => (/* binding */ dynamic)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* static asset route */\n\n\nconst contentType = \"image/x-icon\"\nconst buffer = Buffer.from(\"\", 'base64'\n  )\n\nif (false) {}\n\nfunction GET() {\n  return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(buffer, {\n    headers: {\n      'Content-Type': contentType,\n      'Cache-Control': \"public, max-age=0, must-revalidate\",\n    },\n  })\n}\n\nconst dynamic = 'force-static'\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LW1ldGFkYXRhLXJvdXRlLWxvYWRlci5qcz9maWxlUGF0aD0lMkZVc2VycyUyRnZkYXdzb242NDclMkZEZXNrdG9wJTJGS2lja0FkcyUyRlBTX0Nsb25lJTJGS2lja0Fkc19QYXJrc2hvcmUlMkZhcHAlMkZmYXZpY29uLmljbyZpc0R5bmFtaWNSb3V0ZUV4dGVuc2lvbj0wIT9fX25leHRfbWV0YWRhdGFfcm91dGVfXyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUMwQzs7QUFFMUM7QUFDQTtBQUNBOztBQUVBLElBQUksS0FBSyxFQUFFLEVBU1Y7O0FBRU07QUFDUCxhQUFhLHFEQUFZO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRU8iLCJzb3VyY2VzIjpbIj9fX25leHRfbWV0YWRhdGFfcm91dGVfXyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBzdGF0aWMgYXNzZXQgcm91dGUgKi9cbmltcG9ydCB7IE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJ1xuXG5jb25zdCBjb250ZW50VHlwZSA9IFwiaW1hZ2UveC1pY29uXCJcbmNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5mcm9tKFwiQUFBQkFBRUFBQUFBQUFFQUlBRHNKQUFBRmdBQUFJbFFUa2NOQ2hvS0FBQUFEVWxJUkZJQUFBRUFBQUFCQUFnR0FBQUFYSEtvWmdBQUpMTkpSRUZVZUp6dG5YZDBYUFdWeC9mdm5KeWNCTml3Yk1JdXhCQ3lYc0t5QzBzS2hHUnh3UmhNU1F5aGVSTUlMQ3dKbmRDQ0UxaUlDY1ZGbG1UTGxtUlpzbnF4ZXJHc1pzblNTS00rNnIxTG81RTBtcEZHR2szVGI5OTlvemVXaGNxVU4zUGY2TjE3enVja3g5alNiK2JkKzMyL2NuLzMvdDExOXh4YzVHQUVRY2lQdjhNZUFFRVFlSkFBRUlTTUlRRWdDQmxEQWtBUU1vWUVnQ0JrREFrQVFjZ1lFZ0NDa0RFa0FBUWhZMGdBQ0VMR2tBQVFoSXdoQVNBSUdVTUNRQkF5aGdTQUlHUU1DUUJCeUJnU0FJS1FNU1FBQkNGalNBQUlRc2FRQUJDRWpDRUJJQWdaUXdKQUVES0dCSUFnWkF3SkFFSElHQklBZ3BBeEpBQUVJV05JQUFoQ3hwQUFFSVNNSVFFZ0NCbERBa0FRTW9ZRWdDQmtEQWtBUWNnWUVnQ0NrREVrQUFRaFkwZ0FDRUxHa0FBUWhJd2hBU0FJR1VNQ1FCQXloZ1NBSUdRTUNRQkJ5QmdTQUlLUU1TUUFCQ0ZqU0FBSVFzYVFBQkNFakNFQklBZ1pRd0pBRURLR0JJQWdaQXdKQUVISUdCSUFncEF4SkFBRUlXTklBQWhDeHBBQUVJU01JUUVnQ0JsREFyQkoyYkw5RUF1SVVueWQ0OXZCTVZXM25FeW8zaHR4dHU3MXFMVDZqMkl5R3orUHpXdzhGSnVsT3JMRVllN1B2b2pPYURnUW1WYi9Ybmh5elhQSDQ1VC9GWGltOGxydTMzOXp5NDdEN1BwdCtKK0pFQjhTQUQvbmU5c09zYU5uRk5lRXhGZnZqTXRXQlJVcWVocWJPc2QxUTJONjg3VGVhRE9acld4eGtibGxWdHNpbXpXWUZ0VVRzNWJPL3NtNXlzYWg0Y3lpOXZ4VEtiVXZCRVZYM2hnUXFmZ2E5dWNuUElNRXdNK0FOekVYOFAvTXZjay9MS25xN2VnWjFCcjFzd3VMTmllaTNNTDlsUVV1cU9jdE5qWnJ2aHdEOXg4WHJJdjgzM0ZHTDR3bUN4dlZ6RmhxbWtmVTZZVnRPU0h4eXQxSElpdElFUHdNRWdBL0FLYmhvWWsxajJZV3R4ZTBkbXRtNEsyOFZvQlB6bHRaMDVTSjVRek1zYkMyV2ZiWE9qMTdwVnpMSGkyYVlEdnpOZXdYZWVQc1o3bmo3SzZjY1habjlqajdDY2RQYyt4L0J2L3Qzbk1hOWtpaGhyMVlOc1UrNGY0dC9JeHM3bWVwcGhiWStKeVZGNGxWWnd0V0d4dFc2ODBseXI3Mk0ra05IM0l6aE8vVHNrSDZrQUJJRUpqV2h5WFZQSm1VMTN3R3B0MHIzL0JtN2kzZXhBVmtacitCbld5ZFpYOVM2dGhUSlJOOEVHL05Vck5yTThhOHdnMlpZN3hZd08rQzN3bS9PN052amxWcmpHekdaUHZLREtGM1NHdk1LK3VxakVwcjJCOTRwdkk3Mk44cjhWVklBQ1RFaVlUcTNmbmwzVFVqNHpPVzVjRUVvZCt0TjdPSTlsbjJScVdXZjJ0N0s4amQ1ZFpzTll2cE5LeTlaRml3TUJBejJIeUVEVXJzNzVxd1F3SWdBWTdIS2U4cXJ4dm9nMDIzNVRiRHpmUWg2R0g2ZnIwRWdud2pQbS9Rcjc5eHNHUWdjTW5uV3VKZ3BvUDkzY3NkRWdCRXdwTnJYcXhxSEI1Wk1Ga3ZXOGZuRDgyenQ2dW0yUjBTZk5PTElRQ0N3UkloOVh6cjJZT25MdExtSVJJa0FBaWNUcTE3cDdGZHJWMyt4dGNhYmV4Z281N2ZxTU1PWkY4SmdHRHF5VmxyVm5GSElRbUI3eUVCOENFQlVZcXJ5bXI2dTVkdjZCa3NOaGJhTnN0K2tlZS9nZStPQUNTZDcyQjZ3OEpsZjZiUkdxd3hHWTEvbzlNRDMwRUM0R1hBbVU4bDF6NWZXdDNmcVpzMThwRS92V0RqcC9tdlZtalo3VjdjdFpleUFMenllUUc3NXY3ajdMRzMwMWhpZmp1Ym1KN2oveHhtUlMxZEduMThUbE1JWkNKaVA3L05EZ21BRndsTHFubGExYUdlRnB3ZW9qKzliNDdmTWNjT1ZnRVFvQjNuTk96Qjh4TnNWLzRFKzdrSFI0bXVDTUJiUjRyWk43Y2RkWEQxZmNmWWdUREZaYk1DRU15a3ZPWW9TRVhHZnBhYkZSSUFMeEdmb3dvMVd5NXQ3blhxek96dHltblVZTCtIVzJiOHVWckhueXlVakJqWjhLeUYyVmJKNnpGWkYxbkh0SW1sOXM2eG8wMHo3S1d5S2ZaREowVExGUUg0T0xUaU1nRVF1T2VGZU5iVXFibnM3MEpxOC9HNHFydXhuK2xtaEFSQVpJNUdLYTQrWDk1ZEt5enpaODJMTEtoNXhxc0pPdXNCdi9kZEx1aEx1WUIzODBvQWI1QXFYRGhzWlB1VnVqVm5NSzRJUUhpcWFsVUJBSzdjRWNqMkI1Y3g3WXpSOGZmaGJrTm9VczBUMk05M3MwRUNJQ0xoeWJYUDlRMVBPK2F3QmNQejNMUWFaM01QcHZVUkhiTnNZdDY2YWdCNllqQkRhSnhjWUZuOWN5eXEwOEJ2WWdKVjZvV04vL0dTSlJaMHJDa0FBai84OVNtV1hORHBFQzZMeGNiZ01oSXRDY1NEQkVBRXdDRXppOXZQZzRNS0JnR0JFZmlRcXB2UWJXRHpGay9lOTk2M3RPS3VEUVdBWi90UjlzeGZzdG4wc3RsQVkvdlkxUEU0NVUreG4vdG1nQVRBUTdpMy9qTmRBMVB6NEpnUWN4ZEhqZXgzcFZNK0Qvdzd1R241RjQxNk5tS3dyQmwwVXJMeSttSG5CR0NKTy9aRnNaelNIbWEyMmtWMnhyQ3dtRnZhV1g0a3N1SnFiQi93WjBnQTNBU085eUpUNno2QUhIZXdTYU9WdlY2aDlYbktMdncrMktUVHpMay8xWWUxTm15OFhhZ1pZZ1dLZmxha0hHU3FEczFYenVuRnRKNGhuVXNDSUFESGhtTVRzNDZmVTk4Nk9oa1FwYmdDMngvOEZSSUFONERMTEtublc5T0VoQjVZRDkrRGtNaHpRNmFhQmFobW1EdXpmVE8zWENubEFuN2YvaXgyNWM0Z2Jxb2R1R0xxSGNpdXVqZUkzZmR5RWd0SnJtZXRQWk51RnhaWnpVYkdaOXdTQU9DbVg0YXlpb1lSeDg5U2RhaTFVUFVJMnkvOEVSSUFGNEc3K1lXS0hwWGdmRlhqUm5ZVHdnNC9CSDl5OTV6TGdRZEJYRmc1d0g3MnV4aCtmZTFLNE8xK0pabFZ0NmhGRVlEeHFUbDI1WTRndDBVQXhoNmEyc2g5SHJzcURZN3FUQ2ZpcTNkaCs0ZS9RUUxnQW5DbnZiSmhhRWh3NHZacEUzOEgzOWZCRDhENXZLc0dVLzJYUHMxM1AraVdaZ2FmaGxjd3JXN2VJd0dZblRPejc5eC8zTE94Y0VTa083U1lUZW5tYmJBbmcrMG4vZ1FKZ0pOQTNUMjR3Q000MjhVeEk5clovcFBGRTJ0VzVsbkxwcWJuK0NRYlR3Tk80Ri8yaHJHTTBtNjNsd1VXYnZ3M1BoTHE4VGl1dWplWVpaYjJPSDd1dk5ITVRwK3RleHZiWC93RkVnQW5nSjNtMnBaUlBqMU5aN0x4Q1M4WWdRKzhYRDdGOUN1cTcyeGs4d3NXOXZDYnFhSUYvM0wyL2pIMXN2VzRzd2JDOGErUGhvc3lobTl4dlBGbEladGNtcFhBZllMNGJOVUpiTC94QjBnQU5pQW91bkpMOTlJeDM2akJ5dWZNWXdYL002V1R6T0phN1BPQjlzeWZzNzBTL0FLUXVaZFkwT2F5Q0R6d2FvcW80N2p0NlVqV00yUy9lZ0ZwMk5FWkRaOWorNC9VSVFGWUIyN2FmMjFIN3dSZjUyckthT012eTJBRlA1UUJnOXg5VnkwMnI0MWRzWEtIM3d2ODA1NFFWdFBxMmdiaEc0ZUtSQi9ITFk5SHNLNEIrMG9Oam1paGVqSzJIMGtaRW9BMWdMdjdrSEVtT092N1ZUcTA0QWVpTzlhdXQ3ZVdHVTFXOW05UFJIZzkrQVd1ZS9DRVN5THdTWmpDSytPNGhmdk00MVAyNzJ0MnpyUjRLcVgyUld4L2tpb2tBS3NBOWUwcjZnY0hCRWVONnB4bDEyWGlCZi9qeFJOdW5mVi9HVm5scytBWHVPR2hrM3pPZ0ROMk9GcnB0WEc4OE5jOHh4MENPQjJBdmdYWWZpVkZTQUJXQUJsK1VKbFhjTktNdmpuK3pCMHIrQ0hURDI3eXVXcHdQZzdwczc0V0FHRWFQcUxaK0pneVByZk5hMk9BWlU5RVJwUGpkdzJwOWViZ21LcWJzZjFMYXBBQXJDQXV1eUVPTnM0QXVEZC9BK0tiSDloWE11SFdVVnRVZGd0SzhBdjg1TGRuV0h2ZjFMcGpyRktOZVhVTTM5b1J5RDQvWGVuNC92cEhwaGVPeFNwL2pPMWpVb0lFWUJrbkU2b2ZGbkw3ZzV0blVBTmZJS1hIOVd3L3NNZmVTVU1WQU9EbXgwNnhhZjNhczVmV25nbVhzeEhkNGIyakZ4eS9FM29UVU0zQlM1QUFMTUd0Kzc4OU1Lb3pnWlBrOU05SnBnNS9oMzFJTHR0TmU4UFFCUUE0SEZPOTVoajdSdlRzaXAwZXBBTTd5ZkxsQU56ZmdDN0kyUDRtRlVnQTdyR3YrNFZOdjhFWkM3c3RSeG8xKytDQzBXb2x1ell5M2F5Sm4vNWlCeit3OWRGdy91TFJhZ2EzRGNWSUIzWUcrRDBWRGFQMjcyZkd1QWpOV0xEOVRncVFBSEFrNXpWSEMrdkVBN1c0ZGZ1Vzg1bWJkZlpidWliUUEzODU3d1ZlV0hXY0ZxdU5QenIwMVRodWUrbzBNOHlibDc0ampUNGdTdkVOYk4vRFJ2WUNFQkt2M0NaMDIyM2pwdHRZK2YyckFjMC8zYkdHTmcxNjBDL243M2NGczlyVzhhK01FNzcwR3g4NTZkT3hCTWJYT241L1ZrbEhzZHozQTJRdEFNZGlxLzVUV1BkRDgwMm9vNGNkOUFLd0J6SHBaajAveUltWHloSkE0TTVub3gyNStzc05yaGo3Y2h3dzQyanVzbGNkaGhKdUNUbE5zcjR6SUZzQkFPVnY3aHJYZ1NNWUxZdHNUd0ZlbXU5cVFFTlFUK3cvdU9rdWR0Q3Y1TFV2Qzc4eXp2ZURTbjArRHNpT0ZHb01RaHR6Nk4rQTdZOGtBRDRtS3EzK2ZjRUpEOVRqcHZtdXh2dlZPbzhFNExtUGN0RURmaVZRZWFpbCsvSXN3UU9udkpNT3ZCR3ZmbEhneUJSczc1MHd5TFZsdVd3RlFDanNVYU5aa05TNlgrQkFnMmNDNEhUVlhSOERCVW1XRzZ6SlVjVG8zaUMrSkpwZ1VXa04rN0Y5a2dUQVI0VEVLWGZCK2cvZUFGQmNBenZZVndPYWlYaGljS3B4NTdNeDZBSC9sY0RiRWNSVVhaZVdOMmNMTis0UDRDM3U0cjRmNDFKcjlvcTZnUUZzdnlRQjhBSGYyM2FJVlRlTjhGZlc0SklQZHFDdlJYajc3T3FSN1lMbGx2Vjh0ZGluQlBqRjg3Rk1vN1ZuT0NvYVJsSEhFaEJudi9ZQkx3VHV4YkFEMno5SkFMeE1ZbTd6S2NnR2c0U2ZPeVRVcEhNbEo5czhtd0VJZGpLNW5sMjlLeGc5NkZleTVlR1Q3TzduWXZsRUljeHhYSFAvTWFac0d1Ty9LMmprZWxSbUpjWmxKUURCc1ZYL1BtYzA4M3MvVUZRVE84alg0N0JLSEFFQVN5L3A0cnZ2WWdlOVZQbnhiODd3U1VsZ0tlZGE0ckg5bEFUQUM4Q3gzL21LN25wNHlFYnJJdnNGUWgxL1YvaW8xcjBzd0xYczVOa0dTUzRIcEVKaGxiMzhBN1FrRDR5dXZCN2JYMGtBUkNZNHB1cFd3N3c5NHcrYVdtSUgrRWE4cGRDdUc5RHVHRFRhaElhYjJNRW1SZDQ2Vk9UNG5sTHlXeEt3L1pVRVFHVHl5cm9xNGVIQzIzODNZbUZQWjRFWmlqZmFlOEwxM0E5RHl0bDM5NFNnQjUyVWdKUms0WjdBMVBTOERYcEFZUHNzQ1lCSWNGTzZmNFliWVBCd3p3MUsvKzB2TU8xaStXOVhURDFwNEl0bFFKc3Q3T0NUQ3ZINTdZN3ZKejZuS1FUYmIwa0FSQ0wvWWpkL0tYM0dCSlY5cGIzMlgwNW12M3ZGUUZ5eEdZT0o1VjNzWlo5RktOak9seEpsdlZrSWZRb21wdWVYQkhMV3lzMEN0bUQ3TGdtQWgwQnBiMkhuSDBwOFlRZTFLM3hZSSs1R29ETTJ4UzBSd2xNYitScjcyQUdKUVVDc294d2szd0FXMjM5SkFEd2tKclB4UzNpWUM3WkZkcStFYnZzNUF4UW1NWHR2RmJDdXdTV1oySnhXdHZ2bFpENXRGanN3ZlFYa0p4aU05cjJBVWMyTUJTcEVZL3N3Q1lBSEZGVDBOTUREdkRpMklKa3lYNjdRUE9WZVNUQ3hERktLZTRkMWZGRVB1WndnWkpmMU9ENzd5WVRxUGRnK1RBTGdKbkQyMzdYVTF1djFDaTE2TUx1RHUwVkJ2V0VtaTVVZFBLUGM5QnVIdjM0MzNmR1pVL0piRXJIOW1BVEFUWTdIS2UrR2g2aGRzRWs2N1hjOVhxMFFQeC9BVTRNYWY4R0pkZXluejBSdnl1UWl1TFk4TUdiUHhGUTBEQTFoK3pFSmdKc2tuMnVKaFllWTJHTkFEMlIzZ1o2QTgrNjBCZktScFJaMXN2dWhxbzhQeW52N0VxR0tNT3dEYk9heVladFdBQUlpRlYvckc1Nkd2VC8yUkpIMEUzL1c0MUNqNzA4RFhMVmk1U0Q3bjQveitQcC8yTUVyQmovNjd5aCtJeFRzZEdyOVc5aitUQUxnSWhFcGRiK0hoemN3WTBIdDZ5Y0dOMldwV1pzV2R6UFFXWU1FbzdlUEZMT3I3dlZ6SWVDV051WDFJL3huS3FucWE4UDJaeElBRjBrdmJNdUJoK2NQZWYvT0VPeGhnUkJmVzN2dkZIdm9qYk4rdlVmd2w1Q0wvR2VaME03WnR1dzRqTzdUSkFCT0FtdTI3cVhkLzBDSnRQanlsS0FtL3hJQU1LaTc4TmZ3Q3IvZEg3ajF5ZFBNdHRTWjVWUnk3ZlBZZmswQzRDUlE3bHRvOUFHMzZyQ0RWNjRDQUFaZGlsTUtPOWdORC9tdUFZaFlYTWt0WThhbjdNZXczSXd5Qzl1dlNRQ2M1RXg2dzBlODgzSDhWNjUvWmY5dE5nRVFySDlFeis1N09RazlxRjJsb3RHK0QxRFZPRHlDN2Rja0FFNGlaUDkxVEp2UUF2YkxCajBySFRHS1JvL09qQnJBWWhqa0Q4RHhHblFOeGc1c1p6bTZWRE1RdWtadnhrSWhtMDRBWUxObVdtL2tNK2pQOXVKc0FQNDBaNXpObWFWN2RvOXRJNW9adjdsczlNSW5lWTV4UjJjMGZJTHQzeVFBR3dCZFg0WDEvNmQxZWhRQk9PZ0g1L2JZVmxvN0pMbjJaYXZ4d0t2SmpqR25GN1psWS9zM0NjQUdRTktHOE1CMjUvcytBUWd1SEVGQlR6aTJnOXIrSjl0bVdRbzNFOUY3c2JpSHYxcEV1a3J5eDRSUUkwQ3dzcHIrYm16L0pnSFlBR2oxRFE5cmVzR0t0djVmamVzeTFldzNGeVpaOWJnUkxlQ2thRjlFVnFFSCticHdBalU5czhDUGRYQlVaOXBzYWNHYlRnQUtLcnBWOExEZ0dpMTIwSy9HN1ZscWZtK0N6RzRtaTQwOS9VRW1mcUN2dzhXbGpFQ3JiWkVkaVN5L0Z0dkhTUURXQU5TNWQwakx2Mkx6QnViUmczMDlQcXpSc1JtUnEzMUFiWHNoY2NXZlRHOHdzUWRmVDBFUDlMV0FrdXFDYmJhRW9FMGxBRWZQS0s0eG1lMjkzc0w5b1B6WHU4cHBVUU9wYjFqSGRyK2N4TW9iUmtUOXViNndjZTBjdS9IaGsrakJ2aHI3ZzhzYzQ5eHN4VUkzbFFBY2k2MjZ5N3IwQnZ4THRmUmFmcTlHdFVhOFBRRVFBR0ZUYmM5cktTenBmSWRmelFpZ0tpOTJzSy9HN3o3S2NZd3hyYUExSGR2UFNRRFdJRFNwNWduaENQQ3Bra24wNEhhR055dkZtd1VzRndBQjZJQjdQS21lTFN6TmpLUnNrQ2dreGJKajk3NlU2QmhqWGxtWEF0dlBTUURXSURLMS9tMTRTS0FCZDJTUG93ZTNzMHd0aUJPY3F3bUF3TStmajJQNUZYMmkvQjV2R3RRZXhBNzRsV3pkZStrbzhFSjFYd2UybjVNQXJFRnNsdW93UENTalpSRTlxRjFCS2RJeVlEMEJ1Q1FFc1h3NnJsU1hCbG1sUGVnQnY1Sy8zeG5FMTBNRXEya2VHY2YyY3hLQU5Vak9hNDZEaHpSaGxGWU93RWFraW5RczZJd0FDUHpnVjZIc04zL0pabVcxUS95MVhha1lIQXZlTE1GbHdQaVVnUjlmUisrRUFkdlBTUURXUUNnQ0FsV0FzSVBhRlNJN1prVUpIbGNFUU9CYjIrenRzUlBPdDdNNW96UXVITUd1TzNiQXI2U2pmNG9mMjVCYWI4YjJjeEtBTmNnc2JpK0FoOVNsTjZNSHRiOEl3SExnR0M0OFhjWEdKZzJpak1kZHEyOVhvd2Y4U2hvNnh2bXhxU2RtTGRoK1RnS3dCbGtsSGNYd2tOb1Jyd0g3c3dBSVFDZWdzTE1OL0hRY3crWk5GdmI5UjZUVmU2QlNOY2FQVGFNMVdMSDluQVJnRGJKTE9pN0FRMnJSa2dDSXdTMlBuK0l2N09nTkM2S016eFdEUnFYWVFiK2NpcVhrcXNucE9SdTJuNU1Ba0FDc2FtSUxnTUIzOTRTd3o2T3FITTB5ZkdGL0NpNUZEL3JsQ0JXQ1NRQWtEQzBCdkNNQUFuQi8vN24veTJXbE5VTjgwbzQzN1hSR0UzclFMMGZadExRRW1LSWxnR1RKTEc0L0R3K3BoellCdlE2MEJhdHBWWXN5N3RVL2l4NDk2SmZUMGozQmp3czZCV0g3T1FuQUdxUVZ0R1hDUXhxWm8yTkFYd0ROUHdMamE1bkZLbjRld2NUMEhIclFMd2NFQ1d4Z1JHZkM5bk1TZ0RVUWVnRkNNMURzb0phREFQQnd2KzhQbjUzbnJ5S0xhVlA2ZVc3SkVZUWUrQUpUMC9ac3piYWVpVmxzUHljQldJTzRMTlZSZUVoR3EzK2xBdnUxQUd5ekp4TWRUNjRYNVRNSU5qMWpsRXlmUVpqcENFZWl0YzBqR213L0p3RllnOGpVK25mZ0ljR0U5Q2QrZEJuSTN3VUF1UGFCRVA3M2kyVlNFb0N0eStvQ2xsYjNkMkg3T1FuQUdweE1xTjRycExVL1h6cUZIdGh5RWdEZ1I3ODl3M3BGRWdHdGJsNHlWWU1mZWkzRk1hNmNDNTFsMkg1T0FyQUd3VEZWdDFpV3Btb0JLcHlTNEhJV0FHRFhIeEtaR0Z1Q1V0b0VmTzNMUXNlNFVzNjF4R1A3T1FuQUdnUkVLYjV1bURmeC9oZmZiVUFQYkRrS0FKQlczT1h4WjFGMVRhQi9Eb0hQSXlvZDQ0ckpiUHdDMjg5SkFOYWhzMytTdjF0Yk9DenRvcURlRUlCZWlRZ0FwUEY2T2dzSVQyMUUveHdDVVZuTmpuR0ZKZFhzdy9aeEVvQjFLRlQwdE1DRGttcFpjSy9PQUVaMDdBb0pDQUJRMHpMdTBXYzVFS1pBL3d3Q0ZZMmovSmlnYnNLUnlQSXQyRDVPQXJBT0tma3RDZkN3cHYwb0YwQXNBZWdmMVV0bTQreEliTFZIbitXUk4xTFJQd01BZ3FxYnRWK0dHaG1mc1ZCakVJa1RrVkwzZThHSjl2bEpZVkN4QkdCNGZJWmRzVk1heVRPM1B4M0pGdDJzTkdRMFcvbWpOK3pQd0grT2ZaR09jWlZVOWJWaCt6Y0p3QVlFUlZkdUVVcURSL2hCYndBeEJXQnFlbDR5WitkQS80aDdUVkpyVzhmUnh5N3c1UHNaam5GQjJ6bHMveVlCMkFDWW9uVVBUczNEQXlzYThZK05RTEVFQUVwLy8rTUR4OUdEUnFEQ3pRWWxINGFVbzQ5ZDRPMGp4WTV4aFNmWFBvZnQzeVFBVHBCYjJsa09EMnpZNEIrWGdzUVNBTEN0ZThQUWcwYWdTRG5nMW1mWS9tSUMrdGdGSWpMNFZwTlFMM0V4SUVweEJiWnZrd0E0UVhSRzQ2ZncwR0FoY0UrZUJqM0FmU2tBOTd3UWh4NDBBdTcwSVppWk03RXJKYktQQVZTcTdDY0FOYzBqYW15L0pnRndrdU54eXJzRWgvcGo1VFI2Z1B0U0FLQmdCM2JRQ0JSWHV6NERTQy9wUWgrM0FGd0MwbWp0SmRzemk5cnpzZjJhQk1CSllCOUExYUhtZTI2RnRrbC9JMUJNQWZqYktlbWNuMWMzdTE0dzVJMURSZWpqRnRqMSswVCs3QitBZXliWWZrMEM0QUlKT1UyaDRGRFFmQk03d0gwcEFJa1NhYkFKeDVFR0Yvc01RRitDYSs0N2hqNTJnZGk4Vm41Y2JUMmFUVlVEUUJZQ0VCS3YzQVlQejJDeHNkdXoxT2hCN2lzQmFPbWVSQThjWU9mL0pyZzg5cFNDVHZSeEM4RDBmMUJ0TDRLYVhkSlJndTNQSkFBdUFzc0FhT01FRC9ENU1tbGZEUlpUQUNEM1JncXR0WTdHMWJnMGJyUFZ4bjcydTFqMGNUc0VETzR6TE9VeGhTZlhQb3Z0enlRQWJuQTJ2NVcveUozU000Y2U1TDRTQURBcHJLUHIyalF1alZsS20zOUFWS2I5QWhCVUFkNXM2Yit5RVlBVENkVzc0U0ZPbTJ5U2JoY3V0Z0EwZFU2d0t4SHI2ZTM2UTVKTDQ1MWZzUEQ5Q2JHRFhnQ09JWWVXcHY5SzFmQW90aCtUQUhoQVM1ZUd6MGY5ckY2SEh1aStFZ0N3TncvaXpBSmc3YXhZdWozbmpFR2I4bmNDU3RDRGZqbHZIaTV5akM4eHR5a2MyNGRKQUR3Z282aU43eFdnbnJleVc3T2x1Um5vRFFHQXhoMFliOVhETWE3ZEFveUhVd3VKWEdFRzREWmw5eUIvZ3N4TVppdFVtZHFLN2NNa0FCNFFtbGk5VDNDMk54WFNUQXJ5aGdDQWxWUVArdlJ5MEk3L1RYQ3BvZWpnbUo0dkpvb2Q5TXQ1NmsrWEx2L1V0WTVPYk9iMXZ5d0U0UERwOHEvQlBXNTRvUFVUUm5aRHB2Um1BZDRTQUxCRDBVcWZ2R0d2ZitpRTQ4M3BqSUZRN0hrdEJUM2dWMUtzSE9USEJ5Y0FVV24xNzJQN0x3bUFDRUFhSnp4VUMvZFFueXllUUE5NFh3b0FuR1I5QUkwMnQzc3hjTGlmSFpyYTZOSzR6bVMxb0FmN1NtREpKRFE0Z1pkR1FKVGltOWkrU3dJZ0FrSFJsVGZPR3V6RlFndUdqT3g2Q1FTOXJ3UkFzUC81Sk04clFRTVZjOTQ5ZXNHbDRoL3FTUVA3NGVNUjZBRy9rdVNDVHNjWWsvS2F6MkQ3TFFtQWlCUXFldmg3blF1MlJmWlFnYlJtQWI0UUFLaXlBK1d0eGF3WTlJTmZoZktweDY0WVhLN1orWkowcnZzS2ZQK1JVUDQ0RWt3L3U3QUloV1d3ZlpZRVFFU0NZaXAvTUQ1cHNNSURWbzRiMlhXWitJSHZTd0VRckhkb21nVW4xckZIM2pyTC9tRzM2M24zVjk0YnhCNTdKNDFGWmpWRG9EajllMkdDY0Y3UnorN1lGNFVlN0t0eDRKVENNYzc0Yk5VeGJIOGxBZkFDc1ZtcXc4Sk05ZVZ5TFhyZ1l3akFjcHVkTS9GQitSNDNoYi96MldqdUxYaVNYWDNmTVVkbFlmaGZFSW1iZmhuS2I5Z0Z4TmF3d2JFWmwzOFBWQ3I2NCtGaVNSMzNMUWMrNC9nVW56WE9HdHZWMmkzYkQ2SDdLZ21BRndpSVVueWpkMGpMdDNuTjdKZE9lakNXQUN3MzBFV2p5Y0t2ejZHL1FHZS9sdlVNNmJqQW1PTUQyRjJEd05yOWNoSjZrSy9INndjdmRmNDVsVkwzRXJhZmtnQjRrYWkwaHYxd3Y5dG9XWlJNdFNDeEJBQSsxK2tNbGN2WGNMMWwzZHh5NDY1blk5QURmRDF1NU5iK1VFd1ZyTEp4YVBoNzIrVHo5cGVsQU1EMHJxRnRUQXNQUExaVEd1M0R4QklBaTIyUlhmZGdDUHVYdldIczR6QUYveFozc3pLM1J3WjkvZllmSzNOcmo4R1hmR1A3VVJhY1VNZVBlYW5veHkreC9aTUV3QWVFSnRZOENxWERvWHI0ZjEvQTd4MGd0Z0FJRGc2WFd1NTVNWjZkem16aXAvTGVOdWhOK05HSmN2YmRQZExLN2x1THU1K0xaUXNtKy9LbXVtbDRiTE5uL1pFQUxLTkUyY2VmWC9YcnpXekhPZHlsZ0xjRVlEbVFFZ3diZVI5d2IrWlRhU3BXV05udnNTakFma0Z1V1E5LzkvL0IxOCt5S3lYU2xjZ1pmdkNyTUg2R0JHYTJXTG0xZiswTDJENUpBdUJEanNVcWZ5eW9mK1BrQW1xS3NDOEVZRlcyQjdKYm56ek5udjRnazc4OUNHbkRrUm5OWEZEM3NvYU9jZFk5cUdWdHZWTjhmZitVd2c1MklxV2V2UnRRd243OWJocTcrYkZUa3VsRDZDcVFDM0doWnNqeHZaMnY2SzdIOWtjU0FBVHl5cm9VZ2hNY2JORExUd0JrQ29pWXNEVXlwTmFiajU1UlhJM3RpeVFBQ0FSRUtiN2VOV0R2SXJSZ1hXU1BJOTBUSUFId0hUYy9GczczSHVDL0w0dU5SWnl0ZXdYYkQwa0FFQWxOck5sclhFb0I3ZGFiMlE4UmFnYVFBUGlPNDBuMWp1L3JmSGwzblJ3My9rZ0FWcEJlMkpZdE9NVm5DRXNCRWdEZkFMZjloQnlKYm03bXgwMzl2NDN0ZTlpUUFIQkE4a2R1YVdjRm5BVnJqVmFmWHhrbUFmQStkejRUemZwSGRmejMxRE9vTlFiSFZQMG50dDlKQVJLQUpXQXFLTndZMUM1WTJkNUMzeDBOa2dCNGw5djNSZkxKU1dEVGVxT05DLzVic1AxTktwQUFMQVB1Q2d5TTZQZ2RvcDRaTS90NXJtOUVnQVRBZTJ4NStDUnI3THhVb2h5V2U5aCtKaVZJQUZZZ2RCWUdnMnZEdC9nZ1A0QUV3RHZBemNZQ1JiL2orK0hYL1p1d3hiY25rQUNzQUpZQ3BUWDkzWUxUNUEvTmU3MTJBQW1BRjlnZXlPTE90VG0rRzZnRkFlM2lzUDFMYXBBQXJBSzNGTGdDS3NJS3p1UHR6a0lrQU9MejhtZm5IZDhMbElNTFM2cDVCdHV2cEFnSndCcEFkbGhSWlcrTGJlazYzZWtPNzdVWkp3RVFsK2Mvem1WNmd6M1paMkJVWjRMTFg5aitKRlZJQURZZ3ZiQXRTN2hTRzlYcEhSRWdBUkNQZzJlVWp1K2pzMzl5amx2elg0WHRRMUtHQk1BSjBndGJ6d2tpa05SdEVIMVBnQVRBYytCaVVuQkNyZU83R05YTVdJNUVWbndIMjNla0RnbUFrMXlzSGVnVm5DdHZZSjV0elJMdmRJQUV3RFBncW5OMFZvdmplNEJhRHhFcHRiTE84WGNXRWdBbmdUTFJNS1VVbkt4S3ZjQitsaXRPeDJFU0FQZTU1djdqTExmY29jMThnWS9ZTE5VUmJIL3hGMGdBWEFCS2k2czYxRnJCMlRwMUpsSHFDcElBdUFrMzdZL0tiSFo4L2huRHdpTFVmTVQyRTMrQ0JNQkZvRjFVV2tGcnB0QnBDRzRRUGxzNjZWRzNJUklBMTRIbUl0RDhGQXhPYXBTcTRkR1FPT1VPYlAvd04wZ0EzT1I0blBMdTdxVmFBbEJiTUs3VDRQWlY0b2gya2FvQ3kwQUFZTDBmR0YvcjZPRUhMYndUY3ByQzVINnQxMTFJQUR6Z2FKVGltdFp1amFOVFJvdlc1RmJic2RNaTlnVzQ4WmVoNkVIcUxmN2pxZE9zVWpYcStLeHdNcE9jMXh5SDdRZitEQW1BaDhDK1FIdnZoRUZ3U29ObGtYMVVxM05wU1pEY0kxN0ZYcmp6amgybzN1RCtWNUtaem5DcEZSa3N3ZUp6bWtMb3plOFpKQUFpQUxjSUN4VTlqWEQ4SkZnMDkxWjN0dEJvMlpoUk5BSDQ3Wit6MFlOVlRMNjFJNUE5OTFFT004eGZhbllDUzYrVENkVjdzSi83Wm9BRVFDVGdUUVE3ME9ySldVY2ZyYkpSbzFOTGdxWXBrMmdDOEZtRUFqMW94ZUsycHlKWlZxbmpYaFovdmc4MUcwQndzWi8zWm9FRVFHUTQ1L3gyNnZuV3RQRXBleWRpbUJUa0RzNnhWeXUwcTJZUTdzclg4THYzWXBteWFZeDljenQrOExvTk4vWmZ2WlhHWW5OYW1jbHlxU2RoVGZPSWhudnJQNFQ5ZkRjYkpBQmVJamltOGpiSUdWamVtcXREWjJKUGxVeDRiZjB2MkJQdlplQUhzaHRjOStBSmxuNmg2N0xQb3BzeExzWmxxNExrMXJQUFY1QUFlQkhvUXhpYjJYaElzelFiQUlOTlFqajJ1eU43bkQ4MjFDN1lSQmVBbnFGcDlrOSswcDRMdVBhQjQrelRpRXFtMFY0U1EraldVMURSMHhBY1U3VVYremx1WmtnQWZNRGgweGV2elN4cUw1aWRNem5tQXhENHpWcngxdjRyN1V4T0M3K0JoaDNjNjNIOVF5ZllaMXpncTZjY2h5ajgwUjdVWW9CeTdiVEQ3MzFJQUh6SXNkaXEyNkFKcGRlaWZvVjlIS3FRWlBzdUtOVzFQN2dNQ25SZU5sNFF5S1M4NWtpWU9XRS9LN2xBQXVCakRrVmMvRm9NdHl6b0hkSWF2ZDI2RzM3K2diQkt2aGNlZHRCRDN2NHRqMGV3djUxU3NNR3htY3ZHQ1RuODV5NTJLWU9pSzIvR2ZqNXlnd1FBaVMwN0RyT3dwSm9uY3k1MGxMZjFUTXg2U3d6Z3gwSWp6RHVmamZaNTBFTjc4bCsvazg3ZjAyL3ExRnkycTYrZlhWaThVTjNYeFluaGw1QlJpZjA4NUFvSmdFU0lPRnYzV20zTHFNWmJRakE5WTJTdmZWbm85U1BDR3g4NXlkNDZWTVIzRTRiZnVkTEdKbVl0R1VYdDUyaHpUeHFRQUVpTUV3blZ1NkYyL2RDWTNyeEtISHRzZFcxcTl1SmZ6NG0zTjdEZDNuWG4wQmtsVXphUDhaZHpWaHIwWGl5cDZtdUxTcXYvQUJxeVluL0h4Q1ZJQUNRS0xCSENrMnVmaGFNd3MrV3JRZVdwOVkzb1dHaHFJN3ZEeGJzRFcvZUdzVmUvS09UL2JWSFZBRk5QR3RiOEhkQ0NLekczK1hSZ2RPWDEyTjhuc1Rva0FIN0FrY2p5NitIdG1YT2hzMnhrZk1ZaXBoQ1lyVGJXMGozSnA5eUdwYW40OC9qM0EwdlorMEdsN1BPb0toYVIwY1F5TG5TeEt0VVlHMUxQckp1MUNHLzY4cnFCdm9TY3BoTWg4ZFU3S1hsSCtwQUErQmtRVk1kaXEzNGVuOTEwdktKK2NBQXk1YXdpcGhJN2E3QlhBZE45dUE2ZFZkSlJGSkZTOTFvQVZlRDFPMGdBL0J3NE00Y3J5WkFuSDVsYS8zYnl1WlpZV0RZbzZnY0hJYUVHQWhTT0hPR1NFaHkzUWMwOEsvZld0eTNiYllUL0N5SUNTNDA1bzNsUnE1KzNEYW4xNW82K1NRT2tNeXRWdzJNWHF2czZNb3ZiaTJLelZJZkRrbXArdzRuUWo2QTZFdmJuSnp5REJFQUdRRVlkekJ3QUVJeU5nTDhILzRZeThUWS9KQUFFSVdOSUFBaEN4cEFBRUlTTUlRRWdDQmxEQWtBUU1vWUVnQ0JrREFrQVFjZ1lFZ0NDa0RFa0FBUWhZMGdBQ0VMR2tBQVFoSXdoQVNBSUdVTUNRQkF5aGdTQUlHUU1DUUJCeUJnU0FJS1FNU1FBQkNGalNBQUlRc2FRQUJDRWpDRUJJQWdaUXdKQUVES0dCSUFnWkF3SkFFSElHQklBZ3BBeEpBQUVJV05JQUFoQ3hwQUFFSVNNSVFFZ0NCbERBa0FRTW9ZRWdDQmtEQWtBUWNnWUVnQ0NrREVrQUFRaFkwZ0FDRUxHa0FBUWhJd2hBU0FJR1VNQ1FCQXloZ1NBSUdRTUNRQkJ5QmdTQUlLUU1TUUFCQ0ZqU0FBSVFzYVFBQkNFakNFQklBZ1pRd0pBRURLR0JJQWdaQXdKQUVISUdCSUFncEF4SkFBRUlXTklBQWhDeHBBQUVJU01JUUVnQ0Juei8vWWRNQ01OTTl2K0FBQUFBRWxGVGtTdVFtQ0NcIiwgJ2Jhc2U2NCdcbiAgKVxuXG5pZiAoZmFsc2UpIHtcbiAgY29uc3QgZmlsZVNpemVJbk1CID0gYnVmZmVyLmJ5dGVMZW5ndGggLyAxMDI0IC8gMTAyNFxuICBpZiAoZmlsZVNpemVJbk1CID4gOCkge1xuICAgIHRocm93IG5ldyBFcnJvcignRmlsZSBzaXplIGZvciBPcGVuIEdyYXBoIGltYWdlIFwiL1VzZXJzL3ZkYXdzb242NDcvRGVza3RvcC9LaWNrQWRzL1BTX0Nsb25lL0tpY2tBZHNfUGFya3Nob3JlL2FwcC9mYXZpY29uLmljb1wiIGV4Y2VlZHMgOE1CLiAnICtcbiAgICBgKEN1cnJlbnQ6ICR7ZmlsZVNpemVJbk1CLnRvRml4ZWQoMil9TUIpXG5gICtcbiAgICAnUmVhZCBtb3JlOiBodHRwczovL25leHRqcy5vcmcvZG9jcy9hcHAvYXBpLXJlZmVyZW5jZS9maWxlLWNvbnZlbnRpb25zL21ldGFkYXRhL29wZW5ncmFwaC1pbWFnZSNpbWFnZS1maWxlcy1qcGctcG5nLWdpZidcbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEdFVCgpIHtcbiAgcmV0dXJuIG5ldyBOZXh0UmVzcG9uc2UoYnVmZmVyLCB7XG4gICAgaGVhZGVyczoge1xuICAgICAgJ0NvbnRlbnQtVHlwZSc6IGNvbnRlbnRUeXBlLFxuICAgICAgJ0NhY2hlLUNvbnRyb2wnOiBcInB1YmxpYywgbWF4LWFnZT0wLCBtdXN0LXJldmFsaWRhdGVcIixcbiAgICB9LFxuICB9KVxufVxuXG5leHBvcnQgY29uc3QgZHluYW1pYyA9ICdmb3JjZS1zdGF0aWMnXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-metadata-route-loader.js?filePath=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FPS_Clone%2FKickAds_Parkshore%2Fapp%2Ffavicon.ico&isDynamicRouteExtension=0!?__next_metadata_route__\n");

/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Ffavicon.ico%2Froute&page=%2Ffavicon.ico%2Froute&appPaths=&pagePath=private-next-app-dir%2Ffavicon.ico&appDir=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FPS_Clone%2FKickAds_Parkshore%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FPS_Clone%2FKickAds_Parkshore&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();