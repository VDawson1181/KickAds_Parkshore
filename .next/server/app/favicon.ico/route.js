"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/favicon.ico/route";
exports.ids = ["app/favicon.ico/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Ffavicon.ico%2Froute&page=%2Ffavicon.ico%2Froute&appPaths=&pagePath=private-next-app-dir%2Ffavicon.ico&appDir=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FParkShore%2FParkShore%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FParkShore%2FParkShore&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Ffavicon.ico%2Froute&page=%2Ffavicon.ico%2Froute&appPaths=&pagePath=private-next-app-dir%2Ffavicon.ico&appDir=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FParkShore%2FParkShore%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FParkShore%2FParkShore&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var next_metadata_route_loader_filePath_2FUsers_2Fvdawson647_2FDesktop_2FKickAds_2FParkShore_2FParkShore_2Fapp_2Ffavicon_ico_isDynamicRouteExtension_0_next_metadata_route___WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! next-metadata-route-loader?filePath=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FParkShore%2FParkShore%2Fapp%2Ffavicon.ico&isDynamicRouteExtension=0!?__next_metadata_route__ */ \"(rsc)/./node_modules/next/dist/build/webpack/loaders/next-metadata-route-loader.js?filePath=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FParkShore%2FParkShore%2Fapp%2Ffavicon.ico&isDynamicRouteExtension=0!?__next_metadata_route__\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/favicon.ico/route\",\n        pathname: \"/favicon.ico\",\n        filename: \"favicon\",\n        bundlePath: \"app/favicon.ico/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"next-metadata-route-loader?filePath=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FParkShore%2FParkShore%2Fapp%2Ffavicon.ico&isDynamicRouteExtension=0!?__next_metadata_route__\",\n    nextConfigOutput,\n    userland: next_metadata_route_loader_filePath_2FUsers_2Fvdawson647_2FDesktop_2FKickAds_2FParkShore_2FParkShore_2Fapp_2Ffavicon_ico_isDynamicRouteExtension_0_next_metadata_route___WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/favicon.ico/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Ffavicon.ico%2Froute&page=%2Ffavicon.ico%2Froute&appPaths=&pagePath=private-next-app-dir%2Ffavicon.ico&appDir=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FParkShore%2FParkShore%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FParkShore%2FParkShore&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-metadata-route-loader.js?filePath=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FParkShore%2FParkShore%2Fapp%2Ffavicon.ico&isDynamicRouteExtension=0!?__next_metadata_route__":
/*!**************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-metadata-route-loader.js?filePath=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FParkShore%2FParkShore%2Fapp%2Ffavicon.ico&isDynamicRouteExtension=0!?__next_metadata_route__ ***!
  \**************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   dynamic: () => (/* binding */ dynamic)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* static asset route */\n\n\nconst contentType = \"image/x-icon\"\nconst buffer = Buffer.from(\"\", 'base64'\n  )\n\nif (false) {}\n\nfunction GET() {\n  return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(buffer, {\n    headers: {\n      'Content-Type': contentType,\n      'Cache-Control': \"public, max-age=0, must-revalidate\",\n    },\n  })\n}\n\nconst dynamic = 'force-static'\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LW1ldGFkYXRhLXJvdXRlLWxvYWRlci5qcz9maWxlUGF0aD0lMkZVc2VycyUyRnZkYXdzb242NDclMkZEZXNrdG9wJTJGS2lja0FkcyUyRlBhcmtTaG9yZSUyRlBhcmtTaG9yZSUyRmFwcCUyRmZhdmljb24uaWNvJmlzRHluYW1pY1JvdXRlRXh0ZW5zaW9uPTAhP19fbmV4dF9tZXRhZGF0YV9yb3V0ZV9fIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQzBDOztBQUUxQztBQUNBO0FBQ0E7O0FBRUEsSUFBSSxLQUFLLEVBQUUsRUFTVjs7QUFFTTtBQUNQLGFBQWEscURBQVk7QUFDekI7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFTyIsInNvdXJjZXMiOlsiP19fbmV4dF9tZXRhZGF0YV9yb3V0ZV9fIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIHN0YXRpYyBhc3NldCByb3V0ZSAqL1xuaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInXG5cbmNvbnN0IGNvbnRlbnRUeXBlID0gXCJpbWFnZS94LWljb25cIlxuY29uc3QgYnVmZmVyID0gQnVmZmVyLmZyb20oXCJBQUFCQUFFQUFBQUFBQUVBSUFEc0pBQUFGZ0FBQUlsUVRrY05DaG9LQUFBQURVbElSRklBQUFFQUFBQUJBQWdHQUFBQVhIS29aZ0FBSkxOSlJFRlVlSnp0blhkMFhQV1Z4L2Z2bkp5Y0JOaXdiTUl1eEJDeVhzS3lDMHNLaEdSeHdSaE1TUXloZVJNSUxDd0puZENDRTFpSUNjVkZsbVRMbG1SWnNucXhlckdzWnNuU1NLTSs2cjFMbzVFMG1wRkdHazNUYjk5OW96ZVdoY3FVTjNQZjZOMTd6dWNreDlqU2IrYmQrMzIvY24vMy90MTE5eHhjNUdBRVFjaVB2OE1lQUVFUWVKQUFFSVNNSVFFZ0NCbERBa0FRTW9ZRWdDQmtEQWtBUWNnWUVnQ0NrREVrQUFRaFkwZ0FDRUxHa0FBUWhJd2hBU0FJR1VNQ1FCQXloZ1NBSUdRTUNRQkJ5QmdTQUlLUU1TUUFCQ0ZqU0FBSVFzYVFBQkNFakNFQklBZ1pRd0pBRURLR0JJQWdaQXdKQUVISUdCSUFncEF4SkFBRUlXTklBQWhDeHBBQUVJU01JUUVnQ0JsREFrQVFNb1lFZ0NCa0RBa0FRY2dZRWdDQ2tERWtBQVFoWTBnQUNFTEdrQUFRaEl3aEFTQUlHVU1DUUJBeWhnU0FJR1FNQ1FCQnlCZ1NBSUtRTVNRQUJDRmpTQUFJUXNhUUFCQ0VqQ0VCSUFnWlF3SkFFREtHQklBZ1pBd0pBRUhJR0JJQWdwQXhKQUFFSVdOSUFBaEN4cEFBRUlTTUlRRWdDQmxEQXJCSjJiTDlFQXVJVW55ZDQ5dkJNVlczbkV5bzNodHh0dTcxcUxUNmoySXlHeitQeld3OEZKdWxPckxFWWU3UHZvak9hRGdRbVZiL1huaHl6WFBINDVUL0ZYaW04bHJ1MzM5enk0N0Q3UHB0K0orSkVCOFNBRC9uZTlzT3NhTm5GTmVFeEZmdmpNdFdCUlVxZWhxYk9zZDFRMk42ODdUZWFET1pyV3h4a2JsbFZ0c2lteldZRnRVVHM1Yk8vc201eXNhaDRjeWk5dnhUS2JVdkJFVlgzaGdRcWZnYTl1Y25QSU1Fd00rQU56RVg4UC9NdmNrL0xLbnE3ZWdaMUJyMXN3dUxOaWVpM01MOWxRVXVxT2N0TmpacnZod0Q5eDhYckl2ODMzRkdMNHdtQ3h2VnpGaHFta2ZVNllWdE9TSHh5dDFISWl0SUVQd01FZ0EvQUtiaG9ZazFqMllXdHhlMGRtdG00SzI4Vm9CUHpsdFowNVNKNVF6TXNiQzJXZmJYT2oxN3BWekxIaTJhWUR2ek5ld1hlZVBzWjduajdLNmNjWFpuOWpqN0NjZFBjK3gvQnYvdDNuTWE5a2loaHIxWU5zVSs0ZjR0L0l4czdtZXBwaGJZK0p5VkY0bFZad3RXR3h0VzY4MGx5cjcyTStrTkgzSXpoTy9Uc2tINmtBQklFSmpXaHlYVlBKbVUxM3dHcHQwcjMvQm03aTNleEFWa1pyK0JuV3lkWlg5UzZ0aFRKUk44RUcvTlVyTnJNOGE4d2cyWlk3eFl3TytDM3dtL083TnZqbFZyakd6R1pQdktES0YzU0d2TUsrdXFqRXByMkI5NHB2STcyTjhyOFZWSUFDVEVpWVRxM2ZubDNUVWo0ek9XNWNFRW9kK3RON09JOWxuMlJxV1dmMnQ3SzhqZDVkWnNOWXZwTkt5OVpGaXdNQkF6Mkh5RURVcnM3NXF3UXdJZ0FZN0hLZThxcnh2b2cwMjM1VGJEemZRaDZHSDZmcjBFZ253alBtL1FyNzl4c0dRZ2NNbm5XdUpncG9QOTNjc2RFZ0JFd3BOclhxeHFIQjVaTUZrdlc4Zm5EODJ6dDZ1bTJSMFNmTk9MSVFDQ3dSSWg5WHpyMllPbkx0TG1JUklrQUFpY1RxMTdwN0ZkclYzK3h0Y2FiZXhnbzU3ZnFNTU9aRjhKZ0dEcXlWbHJWbkZISVFtQjd5RUI4Q0VCVVlxcnltcjZ1NWR2NkJrc05oYmFOc3Qra2VlL2dlK09BQ1NkNzJCNnc4SmxmNmJSR3F3eEdZMS9vOU1EMzBFQzRHWEFtVThsMXo1Zld0M2ZxWnMxOHBFL3ZXRGpwL212Vm1qWjdWN2N0WmV5QUx6eWVRRzc1djdqN0xHMzAxaGlmanVibUo3ai94eG1SUzFkR24xOFRsTUlaQ0ppUDcvTkRnbUFGd2xMcW5sYTFhR2VGcHdlb2orOWI0N2ZNY2NPVmdFUW9CM25OT3pCOHhOc1YvNEUrN2tIUjRtdUNNQmJSNHJaTjdjZGRYRDFmY2ZZZ1RERlpiTUNFTXlrdk9Zb1NFWEdmcGFiRlJJQUx4R2Zvd28xV3k1dDduWHF6T3p0eW1uVVlMK0hXMmI4dVZySG55eVVqQmpaOEt5RjJWYko2ekZaRjFuSHRJbWw5czZ4bzAwejdLV3lLZlpESjBUTEZRSDRPTFRpTWdFUXVPZUZlTmJVcWJuczcwSnE4L0c0cXJ1eG4rbG1oQVJBWkk1R0thNCtYOTVkS3l6elo4MkxMS2g1eHFzSk91c0J2L2RkTHVoTHVZQjM4MG9BYjVBcVhEaHNaUHVWdWpWbk1LNElRSGlxYWxVQkFLN2NFY2oyQjVjeDdZelI4ZmZoYmtOb1VzMFQyTTkzczBFQ0lDTGh5YlhQOVExUE8rYXdCY1B6M0xRYVozTVBwdlVSSGJOc1l0NjZhZ0I2WWpCRGFKeGNZRm45Y3l5cTA4QnZZZ0pWNm9XTi8vR1NKUlowckNrQUFqLzg5U21XWE5EcEVDNkx4Y2JnTWhJdENjU0RCRUFFd0NFemk5dlBnNE1LQmdHQkVmaVFxcHZRYldEekZrL2U5OTYzdE9LdURRV0FaL3RSOXN4ZnN0bjBzdGxBWS92WTFQRTQ1VSt4bi90bWdBVEFRN2kzL2pOZEExUHo0SmdRY3hkSGpleDNwVk0rRC93N3VHbjVGNDE2Tm1Ld3JCbDBVckx5K21IbkJHQ0pPL1pGc1p6U0htYTIya1YyeHJDd21GdmFXWDRrc3VKcWJCL3daMGdBM0FTTzl5SlQ2ejZBSEhld1NhT1Z2VjZoOVhuS0x2dysyS1RUekxrLzFZZTFObXk4WGFnWllnV0tmbGFrSEdTcURzMVh6dW5GdEo0aG5Vc0NJQURIaG1NVHM0NmZVOTg2T2hrUXBiZ0MyeC84RlJJQU40RExMS25uVzlPRWhCNVlEOStEa01oelE2YWFCYWhtbUR1emZUTzNYQ25sQW43Zi9peDI1YzRnYnFvZHVHTHFIY2l1dWplSTNmZHlFZ3RKcm1ldFBaTnVGeFpaelViR1o5d1NBT0NtWDRheWlvWVJ4ODlTZGFpMVVQVUkyeS84RVJJQUY0RzcrWVdLSHBYZ2ZGWGpSbllUd2c0L0JIOXk5NXpMZ1FkQlhGZzV3SDcydXhoK2ZlMUs0TzErSlpsVnQ2aEZFWUR4cVRsMjVZNGd0MFVBeGg2YTJzaDlIcnNxRFk3cVRDZmlxM2RoKzRlL1FRTGdBbkNudmJKaGFFaHc0dlpwRTM4SDM5ZkJEOEQ1dktzR1UvMlhQczEzUCtpV1pnYWZobGN3clc3ZUl3R1luVE96Nzl4LzNMT3hjRVNrTzdTWVRlbm1iYkFuZyswbi9nUUpnSk5BM1QyNHdDTTQyOFV4STlyWi9wUEZFMnRXNWxuTHBxYm4rQ1FiVHdOTzRGLzJockdNMG02M2x3VVdidnczUGhMcThUaXV1amVZWlpiMk9IN3V2TkhNVHArdGV4dmJYL3dGRWdBbmdKM20ycFpSUGoxTlo3THhDUzhZZ1ErOFhEN0Y5Q3VxNzJ4azh3c1c5dkNicWFJRi8zTDIvakgxc3ZXNHN3YkM4YStQaG9zeWhtOXh2UEZsSVp0Y21wWEFmWUw0Yk5VSmJML3hCMGdBTmlBb3VuSkw5OUl4MzZqQnl1Zk1Zd1gvTTZXVHpPSmE3UE9COXN5ZnM3MFMvQUtRdVpkWTBPYXlDRHp3YW9xbzQ3anQ2VWpXTTJTL2VnRnAyTkVaRFo5ais0L1VJUUZZQjI3YWYyMUg3d1JmNTJyS2FPTXZ5MkFGUDVRQmc5eDlWeTAycjQxZHNYS0gzd3Y4MDU0UVZ0UHEyZ2JoRzRlS1JCL0hMWTlIc0s0Qiswb05qbWloZWpLMkgwa1pFb0ExZ0x2N2tIRW1PT3Y3VlRxMDRBZWlPOWF1dDdlV0dVMVc5bTlQUkhnOStBV3VlL0NFU3lMd1NaakNLK080aGZ2TTQxUDI3MnQyenJSNEtxWDJSV3gva2lva0FLc0E5ZTByNmdjSEJFZU42cHhsMTJYaUJmL2p4Uk51bmZWL0dWbmxzK0FYdU9HaGszek9nRE4yT0ZycHRYRzg4TmM4eHgwQ09CMkF2Z1hZZmlWRlNBQldBQmwrVUpsWGNOS012am4rekIwcitDSFREMjd5dVdwd1BnN3BzNzRXQUdFYVBxTForSmd5UHJmTmEyT0FaVTlFUnBQamR3MnA5ZWJnbUtxYnNmMUxhcEFBckNBdXV5RU9OczRBdURkL0ErS2JIOWhYTXVIV1VWdFVkZ3RLOEF2ODVMZG5XSHZmMUxwanJGS05lWFVNMzlvUnlENC9YZW40L3ZwSHBoZU94U3Avak8xalVvSUVZQmtuRTZvZkZuTDdnNXRuVUFOZklLWEg5V3cvc01mZVNVTVZBT0RteDA2eGFmM2FzNWZXbmdtWHN4SGQ0YjJqRnh5L0Uzb1RVTTNCUzVBQUxNR3QrNzg5TUtvemdaUGs5TTlKcGc1L2gzMUlMdHROZThQUUJRQTRIRk85NWhqN1J2VHNpcDBlcEFNN3lmTGxBTnpmZ0M3STJQNG1GVWdBN3JHdis0Vk52OEVaQzdzdFJ4bzErK0NDMFdvbHV6WXkzYXlKbi81aUJ6K3c5ZEZ3L3VMUmFnYTNEY1ZJQjNZRytEMFZEYVAyNzJmR3VBak5XTEQ5VGdxUUFIQWs1elZIQyt2RUE3VzRkZnVXODVtYmRmWmJ1aWJRQTM4NTd3VmVXSFdjRnF1TlB6cjAxVGh1ZStvME04eWJsNzRqalQ0Z1N2RU5iTi9EUnZZQ0VCS3YzQ1owMjIzanB0dFkrZjJyQWMwLzNiR0dOZzE2MEMvbjczY0ZzOXJXOGErTUU3NzBHeDg1NmRPeEJNYlhPbjUvVmtsSHNkejNBMlF0QU1kaXEvNVRXUGREODAyb280Y2Q5QUt3QnpIcFpqMC95SW1YeWhKQTRNNW5veDI1K3NzTnJoajdjaHd3NDJqdXNsY2RoaEp1Q1RsTnNyNHpJRnNCQU9WdjdoclhnU01ZTFl0c1R3RmVtdTlxUUVOUVQrdy91T2t1ZHRDdjVMVXZDNzh5enZlRFNuMCtEc2lPRkdvTVFodHo2TitBN1k4a0FENG1LcTMrZmNFSkQ5VGpwdm11eHZ2Vk9vOEU0TG1QY3RFRGZpVlFlYWlsKy9Jc3dRT252Sk1PdkJHdmZsSGd5QlJzNzUwd3lMVmx1V3dGUUNqc1VhTlprTlM2WCtCQWcyY0M0SFRWWFI4REJVbVdHNnpKVWNUbzNpQytKSnBnVVdrTis3RjlrZ1RBUjRURUtYZkIrZy9lQUZCY0F6dllWd09haVhoaWNLcHg1N014NkFIL2xjRGJFY1JVWFplV04yY0xOKzRQNEMzdTRyNGY0MUpyOW9xNmdRRnN2eVFCOEFIZjIzYUlWVGVOOEZmVzRKSVBkcUN2UlhqNzdPcVI3WUxsbHZWOHRkaW5CUGpGODdGTW83Vm5PQ29hUmxISEVoQm52L1lCTHdUdXhiQUQyejlKQUx4TVltN3pLY2dHZzRTZk95VFVwSE1sSjlzOG13RUlkaks1bmwyOUt4Zzk2RmV5NWVHVDdPN25ZdmxFSWN4eFhIUC9NYVpzR3VPL0syamtlbFJtSmNabEpRREJzVlgvUG1jMDgzcy9VRlFUTzhqWDQ3QktIQUVBU3kvcDRydnZZZ2U5VlBueGI4N3dTVWxnS2VkYTRySDlsQVRBQzhDeDMvbUs3bnA0eUVickl2c0ZRaDEvVi9pbzFyMHN3TFhzNU5rR1NTNEhwRUpobGIzOEE3UWtENHl1dkI3Ylgwa0FSQ1k0cHVwV3c3dzk0dythV21JSCtFYThwZEN1RzlEdUdEVGFoSWFiMk1FbVJkNDZWT1Q0bmxMeVd4S3cvWlVFUUdUeXlyb3E0ZUhDMjM4M1ltRlBaNEVaaWpmYWU4TDEzQTlEeXRsMzk0U2dCNTJVZ0pSazRaN0ExUFM4RFhwQVlQc3NDWUJJY0ZPNmY0WWJZUEJ3encxSy8rMHZNTzFpK1c5WFREMXA0SXRsUUpzdDdPQ1RDdkg1N1k3dkp6Nm5LUVRiYjBrQVJDTC9ZamQvS1gzR0JKVjlwYjMyWDA1bXYzdkZRRnl4R1lPSjVWM3NaWjlGS05qT2x4Smx2VmtJZlFvbXB1ZVhCSExXeXMwQ3RtRDdMZ21BaDBCcGIySG5IMHA4WVFlMUszeFlJKzVHb0RNMnhTMFJ3bE1iK1JyNzJBR0pRVUNzb3h3azN3QVcyMzlKQUR3a0pyUHhTM2lZQzdaRmRxK0VidnM1QXhRbU1YdHZGYkN1d1NXWjJKeFd0dnZsWkQ1dEZqc3dmUVhrSnhpTTlyMkFVYzJNQlNwRVkvc3dDWUFIRkZUME5NRER2RGkySUpreVg2N1FQT1ZlU1RDeERGS0tlNGQxZkZFUHVad2daSmYxT0Q3N3lZVHFQZGcrVEFMZ0puRDIzN1hVMXV2MUNpMTZNTHVEdTBWQnZXRW1pNVVkUEtQYzlCdUh2MzQzM2ZHWlUvSmJFckg5bUFUQVRZN0hLZStHaDZoZHNFazY3WGM5WHEwUVB4L0FVNE1hZjhHSmRleW56MFJ2eXVRaXVMWThNR2JQeEZRMERBMWgrekVKZ0pza24ydUpoWWVZMkdOQUQyUjNnWjZBOCs2MEJmS1JwUloxc3Z1aHFvOFB5bnY3RXFHS01Pd0RiT2F5WVp0V0FBSWlGVi9yRzU2R3ZULzJSSkgwRTMvVzQxQ2o3MDhEWExWaTVTRDduNC96K1BwLzJNRXJCai82N3loK0l4VHNkR3I5VzlqK1RBTGdJaEVwZGIrSGh6Y3dZMEh0NnljR04yV3BXWnNXZHpQUVdZTUVvN2VQRkxPcjd2VnpJZUNXTnVYMUkveG5LcW5xYThQMlp4SUFGMGt2Yk11QmgrY1BlZi9PRU94aGdSQmZXM3Z2Rkh2b2piTit2VWZ3bDVDTC9HZVowTTdadHV3NGpPN1RKQUJPQW11MjdxWGQvMENKdFBqeWxLQW0veElBTUtpNzhOZndDci9kSDdqMXlkUE10dFNaNVZSeTdmUFlmazBDNENSUTdsdG85QUczNnJDRFY2NENBQVpkaWxNS085Z05EL211QVloWVhNa3RZOGFuN01ldzNJd3lDOXV2U1FDYzVFeDZ3MGU4ODNIOFY2NS9aZjl0TmdFUXJIOUV6KzU3T1FrOXFGMmxvdEcrRDFEVk9EeUM3ZGNrQUU0aVpQOTFUSnZRQXZiTEJqMHJIVEdLUm8vT2pCckFZaGprRDhEeEduUU54ZzVzWnptNlZETVF1a1p2eGtJaG0wNEFZTE5tV20va00ralA5dUpzQVA0MFo1ek5tYVY3ZG85dEk1b1p2N2xzOU1JbmVZNXhSMmMwZklMdDN5UUFHd0JkWDRYMS82ZDFlaFFCT09nSDUvYllWbG83SkxuMlphdnh3S3ZKampHbkY3WmxZL3MzQ2NBR1FOS0c4TUIyNS9zK0FRZ3VIRUZCVHppMmc5citKOXRtV1FvM0U5RjdzYmlIdjFwRXVrcnl4NFJRSTBDd3NwcitibXovSmdIWUFHajFEUTlyZXNHS3R2NWZqZXN5MWV3M0Z5Wlo5YmdSTGVDa2FGOUVWcUVIK2Jwd0FqVTlzOENQZFhCVVo5cHNhY0diVGdBS0tycFY4TERnR2kxMjBLL0c3VmxxZm0rQ3pHNG1pNDA5L1VFbWZxQ3Z3OFdsakVDcmJaRWRpU3kvRnR2SFNRRFdBTlM1ZDBqTHYyTHpCdWJSZzMwOVBxelJzUm1ScTMxQWJYc2hjY1dmVEc4d3NRZGZUMEVQOUxXQWt1cUNiYmFFb0UwbEFFZlBLSzR4bWUyOTNzTDlvUHpYdThwcFVRT3BiMWpIZHIrY3hNb2JSa1Q5dWI2d2NlMGN1L0hoaytqQnZocjdnOHNjNDl4c3hVSTNsUUFjaTYyNnk3cjBCdnhMdGZSYWZxOUd0VWE4UFFFUUFHRlRiYzlyS1N6cGZJZGZ6UWlnS2k5MnNLL0c3ejdLY1l3eHJhQTFIZHZQU1FEV0lEU3A1Z25oQ1BDcGtrbjA0SGFHTnl2Rm13VXNGd0FCNklCN1BLbWVMU3pOaktSc2tDZ2t4YkpqOTc2VTZCaGpYbG1YQXR2UFNRRFdJREsxL20xNFNLQUJkMlNQb3dlM3Mwd3RpQk9jcXdtQXdNK2ZqMlA1RlgyaS9CNXZHdFFleEE3NGxXemRlK2tvOEVKMVh3ZTJuNU1BckVGc2x1b3dQQ1NqWlJFOXFGMUJLZEl5WUQwQnVDUUVzWHc2cmxTWEJsbWxQZWdCdjVLLzN4bkUxME1FcTJrZUdjZjJjeEtBTlVqT2E0NkRoelJobEZZT3dFYWtpblFzNkl3QUNQemdWNkhzTjMvSlptVzFRL3kxWGFrWUhBdmVMTUZsd1BpVWdSOWZSKytFQWR2UFNRRFdRQ2dDQWxXQXNJUGFGU0k3WmtVSkhsY0VRT0JiMit6dHNSUE90N001b3pRdUhNR3VPM2JBcjZTamY0b2YyNUJhYjhiMmN4S0FOY2dzYmkrQWg5U2xONk1IdGI4SXdITGdHQzQ4WGNYR0pnMmlqTWRkcTI5WG93ZjhTaG82eHZteHFTZG1MZGgrVGdLd0Jsa2xIY1h3a05vUnJ3SDdzd0FJUUNlZ3NMTU4vSFFjdytaTkZ2YjlSNlRWZTZCU05jYVBUYU0xV0xIOW5BUmdEYkpMT2k3QVEyclJrZ0NJd1MyUG4rSXY3T2dOQzZLTXp4V0RScVhZUWIrY2lxWGtxc25wT1J1Mm41TUFrQUNzYW1JTGdNQjM5NFN3ejZPcUhNMHlmR0YvQ2k1RkQvcmxDQldDU1FBa0RDMEJ2Q01BQW5CLy83bi95MldsTlVOODBvNDM3WFJHRTNyUUwwZlp0TFFFbUtJbGdHVEpMRzQvRHcrcGh6WUJ2UTYwQmF0cFZZc3k3dFUvaXg0OTZKZlQwajNCandzNkJXSDdPUW5BR3FRVnRHWENReHFabzJOQVh3RE5Qd0xqYTVuRktuNGV3Y1QwSEhyUUx3Y0VDV3hnUkdmQzluTVNnRFVRZWdGQ00xRHNvSmFEQVBCd3YrOFBuNTNucnlLTGFWUDZlVzdKRVlRZStBSlQwL1pzemJhZWlWbHNQeWNCV0lPNExOVlJlRWhHcTMrbEF2dTFBR3l6SnhNZFQ2NFg1VE1JTmoxamxFeWZRWmpwQ0VlaXRjMGpHbXcvSndGWWc4alUrbmZnSWNHRTlDZCtkQm5JM3dVQXVQYUJFUDczaTJWU0VvQ3R5K29DbGxiM2QySDdPUW5BR3B4TXFONHJwTFUvWHpxRkh0aHlFZ0RnUjc4OXczcEZFZ0d0Ymw0eVZZTWZlaTNGTWE2Y0M1MWwySDVPQXJBR3dURlZ0MWlXcG1vQktweVM0SElXQUdEWEh4S1pHRnVDVXRvRWZPM0xRc2U0VXM2MXhHUDdPUW5BR2dSRUtiNXVtRGZ4L2hmZmJVQVBiRGtLQUpCVzNPWHhaMUYxVGFCL0RvSFBJeW9kNDRySmJQd0MyODlKQU5haHMzK1N2MXRiT0N6dG9xRGVFSUJlaVFnQXBQRjZPZ3NJVDIxRS94d0NVVm5Oam5HRkpkWHN3L1p4RW9CMUtGVDB0TUNEa21wWmNLL09BRVowN0FvSkNBQlEwekx1MFdjNUVLWkEvd3dDRlkyai9KaWdic0tSeVBJdDJENU9BckFPS2ZrdENmQ3dwdjBvRjBBc0FlZ2YxVXRtNCt4SWJMVkhuK1dSTjFMUlB3TUFncXFidFYrR0dobWZzVkJqRUlrVGtWTDNlOEdKOXZsSllWQ3hCR0I0ZklaZHNWTWF5VE8zUHgzSkZ0MnNOR1EwVy9tak4relB3SCtPZlpHT2NaVlU5YlZoK3pjSndBWUVSVmR1RVVxRFIvaEJid0F4QldCcWVsNHlaK2RBLzRoN1RWSnJXOGZSeHk3dzVQc1pqbkZCMnpscy95WUIyQUNZb25VUFRzM0RBeXNhOFkrTlFMRUVBRXAvLytNRHg5R0RScURDelFZbEg0YVVvNDlkNE8wanhZNXhoU2ZYUG9mdDN5UUFUcEJiMmxrT0Qyelk0QitYZ3NRU0FMQ3RlOFBRZzBhZ1NEbmcxbWZZL21JQyt0Z0ZJakw0VnBOUUwzRXhJRXB4QmJadmt3QTRRWFJHNDZmdzBHQWhjRStlQmozQWZTa0E5N3dRaHg0MEF1NzBJWmlaTTdFckpiS1BBVlNxN0NjQU5jMGphbXkvSmdGd2t1Tnh5cnNFaC9wajVUUjZnUHRTQUtCZ0IzYlFDQlJYdXo0RFNDL3BRaCszQUZ3QzBtanRKZHN6aTlyenNmMmFCTUJKWUI5QTFhSG1lMjZGdGtsL0kxQk1BZmpiS2VtY24xYzN1MTR3NUkxRFJlampGdGoxKzBUKzdCK0FleWJZZmswQzRBSUpPVTJoNEZEUWZCTTd3SDBwQUlrU2FiQUp4NUVHRi9zTVFGK0NhKzQ3aGo1MmdkaThWbjVjYlQyYVRWVURRQllDRUJLdjNBWVB6MkN4c2R1ejFPaEI3aXNCYU9tZVJBOGNZT2YvSnJnODlwU0NUdlJ4QzhEMGYxQnRMNEthWGRKUmd1M1BKQUF1QXNzQWFPTUVEL0Q1TW1sZkRSWlRBQ0QzUmdxdHRZN0cxYmcwYnJQVnhuNzJ1MWowY1RzRURPNHpMT1V4aFNmWFBvdnR6eVFBYm5BMnY1Vy95SjNTTTRjZTVMNFNBREFwcktQcjJqUXVqVmxLbTM5QVZLYjlBaEJVQWQ1czZiK3lFWUFUQ2RXNzRTRk9tMnlTYmhjdXRnQTBkVTZ3S3hIcjZlMzZRNUpMNDUxZnNQRDlDYkdEWGdDT0lZZVdwdjlLMWZBb3RoK1RBSGhBUzVlR3owZjlyRjZISHVpK0VnQ3dOdy9pekFKZzdheFl1ajNuakVHYjhuY0NTdENEZmpsdkhpNXlqQzh4dHlrYzI0ZEpBRHdnbzZpTjd4V2ducmV5VzdPbHVSbm9EUUdBeGgwWWI5WERNYTdkQW95SFV3dUpYR0VHNERabDl5Qi9nc3hNWml0VW1kcUs3Y01rQUI0UW1saTlUM0MyTnhYU1RBcnloZ0NBbFZRUCt2UnkwSTcvVFhDcG9lamdtSjR2Sm9vZDlNdDU2aytYTHYvVXRZNU9iT2Ixdnl3RTRQRHA4cS9CUFc1NG9QVVRSblpEcHZSbUFkNFNBTEJEMFVxZnZHR3ZmK2lFNDgzcGpJRlE3SGt0QlQzZ1YxS3NIT1RIQnljQVVXbjE3MlA3THdtQUNFQWFKenhVQy9kUW55eWVRQTk0WHdvQW5HUjlBSTAydDNzeGNMaWZIWnJhNk5LNHptUzFvQWY3U21ESkpEUTRnWmRHUUpUaW05aStTd0lnQWtIUmxUZk9HdXpGUWd1R2pPeDZDUVM5cndSQXNQLzVKTThyUVFNVmM5NDllc0dsNGgvcVNRUDc0ZU1SNkFHL2t1U0NUc2NZay9LYXoyRDdMUW1BaUJRcWV2aDduUXUyUmZaUWdiUm1BYjRRQUtpeUErV3R4YXdZOUlOZmhmS3B4NjRZWEs3WitaSjBydnNLZlArUlVQNDRFa3cvdTdBSWhXV3dmWllFUUVTQ1lpcC9NRDVwc01JRFZvNGIyWFdaK0lIdlN3RVFySGRvbWdVbjFyRkgzanJML21HMzYzbjNWOTRieEI1N0o0MUZaalZEb0RqOWUyR0NjRjdSeis3WUY0VWU3S3R4NEpUQ01jNzRiTlV4Ykg4bEFmQUNzVm1xdzhKTTllVnlMWHJnWXdqQWNwdWRNL0ZCK1I0M2hiL3oyV2p1TFhpU1hYM2ZNVWRsWWZoZkVJbWJmaG5LYjlnRnhOYXd3YkVabDM4UFZDcjY0K0ZpU1IzM0xRYys0L2dVbnpYT0d0dlYyaTNiRDZIN0tnbUFGd2lJVW55amQwakx0M25ON0pkT2VqQ1dBQ3czMEVXanljS3Z6NkcvUUdlL2x2VU02YmpBbU9NRDJGMkR3TnI5Y2hKNmtLL0g2d2N2ZGY0NWxWTDNFcmFma2dCNGthaTBodjF3djl0b1daUk10U0N4QkFBKzEra01sY3ZYY0wxbDNkeHk0NjVuWTlBRGZEMXU1TmIrVUV3VnJMSnhhUGg3MitUejlwZWxBTUQwcnFGdFRBc1BQTFpUR3UzRHhCSUFpMjJSWGZkZ0NQdVh2V0hzNHpBRi94WjNzekszUndaOS9mWWZLM05yajhHWGZHUDdVUmFjVU1lUGVhbm94eSt4L1pNRXdBZUVKdFk4Q3FYRG9YcjRmMS9BN3gwZ3RnQUlEZzZYV3U1NU1aNmR6bXppcC9MZU51aE4rTkdKY3ZiZFBkTEs3bHVMdTUrTFpRc20rL0ttdW1sNGJMTm4vWkVBTEtORTJjZWZYL1hyeld6SE9keWxnTGNFWURtUUVnd2JlUjl3YitaVGFTcFdXTm52c1NqQWZrRnVXUTkvOS8vQjE4K3lLeVhTbGNnWmZ2Q3JNSDZHQkdhMldMbTFmKzBMMkQ1SkF1QkRqc1VxZnl5b2YrUGtBbXFLc0M4RVlGVzJCN0pibnp6Tm52NGdrNzg5Q0duRGtSbk5YRkQzc29hT2NkWTlxR1Z0dlZOOGZmK1V3ZzUySXFXZXZSdFF3bjc5YmhxNytiRlRrdWxENkNxUUMzR2hac2p4dloydjZLN0g5a2NTQUFUeXlyb1VnaE1jYk5ETFR3QmtDb2lZc0RVeXBOYWJqNTVSWEkzdGl5UUFDQVJFS2I3ZU5XRHZJclJnWFdTUEk5MFRJQUh3SFRjL0ZzNzNIdUMvTDR1TlJaeXRld1hiRDBrQUVBbE5yTmxyWEVvQjdkYWIyUThSYWdhUUFQaU80MG4xanUvcmZIbDNuUnczL2tnQVZwQmUySll0T01WbkNFc0JFZ0RmQUxmOWhCeUpibTdteDAzOXY0M3RlOWlRQUhCQThrZHVhV2NGbkFWcmpWYWZYeGttQWZBK2R6NFR6ZnBIZGZ6MzFET29OUWJIVlAwbnR0OUpBUktBSldBcUtOd1kxQzVZMmQ1QzN4ME5rZ0I0bDl2M1JmTEpTV0RUZXFPTkMvNWJzUDFOS3BBQUxBUHVDZ3lNNlBnZG9wNFpNL3Q1cm05RWdBVEFlMng1K0NScjdMeFVvaHlXZTloK0ppVklBRllnZEJZR2cydkR0L2dnUDRBRXdEdkF6Y1lDUmIvaisrSFgvWnV3eGJjbmtBQ3NBSllDcFRYOTNZTFQ1QS9OZTcxMkFBbUFGOWdleU9MT3RUbStHNmdGQWUzaXNQMUxhcEFBckFLM0ZMZ0NLc0lLenVQdHprSWtBT0x6OG1mbkhkOExsSU1MUzZwNUJ0dXZwQWdKd0JwQWRsaFJaVytMYmVrNjNla083N1VaSndFUWwrYy96bVY2Z3ozWloyQlVaNExMWDlqK0pGVklBRFlndmJBdFM3aFNHOVhwSFJFZ0FSQ1BnMmVVanUranMzOXlqbHZ6WDRYdFExS0dCTUFKMGd0Ynp3a2lrTlJ0RUgxUGdBVEFjK0JpVW5CQ3JlTzdHTlhNV0k1RVZud0gyM2VrRGdtQWsxeXNIZWdWbkN0dllKNXR6Ukx2ZElBRXdEUGdxbk4wVm92amU0QmFEeEVwdGJMTzhYY1dFZ0FuZ1RMUk1LVVVuS3hLdmNCK2xpdE94MkVTQVBlNTV2N2pMTGZjb2MxOGdZL1lMTlVSYkgveEYwZ0FYQUJLaTZzNjFGckIyVHAxSmxIcUNwSUF1QWszN1kvS2JIWjgvaG5Ed2lMVWZNVDJFMytDQk1CRm9GMVVXa0ZycHRCcENHNFFQbHM2NlZHM0lSSUExNEhtSXREOEZBeE9hcFNxNGRHUU9PVU9iUC93TjBnQTNPUjRuUEx1N3FWYUFsQmJNSzdUNFBaVjRvaDJrYW9DeTBBQVlMMGZHRi9yNk9FSExid1RjcHJDNUg2dDExMUlBRHpnYUpUaW10WnVqYU5UUm92VzVGYmJzZE1pOWdXNDhaZWg2RUhxTGY3anFkT3NValhxK0t4d01wT2MxeHlIN1FmK0RBbUFoOEMrUUh2dmhFRndTb05sa1gxVXEzTnBTWkRjSTE3RlhyanpqaDJvM3VEK1Y1S1p6bkNwRlJrc3dlSnpta0xvemU4WkpBQWlBTGNJQ3hVOWpYRDhKRmcwOTFaM3R0Qm8yWmhSTkFINDdaK3owWU5WVEw2MUk1QTk5MUVPTTh4ZmFuWUNTNitUQ2RWN3NKLzdab0FFUUNUZ1RRUTcwT3JKV1VjZnJiSlJvMU5MZ3FZcGsyZ0M4Rm1FQWoxb3hlSzJweUpaVnFualhoWi92ZzgxRzBCd3NaLzNab0VFUUdRNDUveDI2dm5XdFBFcGV5ZGltQlRrRHM2eFZ5dTBxMllRN3NyWDhMdjNZcG15YVl4OWN6dCs4TG9OTi9aZnZaWEdZbk5hbWNseXFTZGhUZk9JaG52clA0VDlmRGNiSkFCZUlqaW04amJJR1ZqZW1xdERaMkpQbFV4NGJmMHYyQlB2WmVBSHNodGM5K0FKbG42aDY3TFBvcHN4THNabHE0TGsxclBQVjVBQWVCSG9ReGliMlhoSXN6UWJBSU5OUWpqMnV5TjduRDgyMUM3WVJCZUFucUZwOWs5KzBwNEx1UGFCNCt6VGlFcW0wVjRTUStqV1UxRFIweEFjVTdVVit6bHVaa2dBZk1EaDB4ZXZ6U3hxTDVpZE16bm1BeEQ0elZyeDF2NHI3VXhPQzcrQmhoM2M2M0g5UXlmWVoxemdxNmNjaHlqODBSN1VZb0J5N2JURDczMUlBSHpJc2RpcTI2QUpwZGVpZm9WOUhLcVFaUHN1S05XMVA3Z01DblJlTmw0UXlLUzg1a2lZT1dFL0s3bEFBdUJqRGtWYy9Gb010eXpvSGRJYXZkMjZHMzcrZ2JCS3ZoY2VkdEJEM3Y0dGowZXd2NTFTc01HeG1jdkdDVG44NXk1MktZT2lLMi9HZmo1eWd3UUFpUzA3RHJPd3BKb25jeTUwbExmMVRNeDZTd3pneDBJanpEdWZqZlo1MEVONzhsKy9rODdmMDIvcTFGeTJxNitmWFZpOFVOM1h4WW5obDVCUmlmMDg1QW9KZ0VTSU9GdjNXbTNMcU1aYlFqQTlZMlN2ZlZubzlTUENHeDg1eWQ0NlZNUjNFNGJmdWRMR0ptWXRHVVh0NTJoelR4cVFBRWlNRXduVnU2RjIvZENZM3J4S0hIdHNkVzFxOXVKZno0bTNON0RkM25YbjBCa2xVemFQOFpkelZocjBYaXlwNm11TFNxdi9BQnF5WW4vSHhDVklBQ1FLTEJIQ2sydWZoYU13cytXclFlV3A5WTNvV0docUk3dkR4YnNEVy9lR3NWZS9LT1QvYlZIVkFGTlBHdGI4SGRDQ0t6RzMrWFJnZE9YMTJOOG5zVG9rQUg3QWtjank2K0h0bVhPaHMyeGtmTVlpcGhDWXJUYlcwajNKcDl5R3BhbjQ4L2ozQTB2WiswR2w3UE9vS2hhUjBjUXlMblN4S3RVWUcxTFBySnUxQ0cvNjhycUJ2b1NjcGhNaDhkVTdLWGxIK3BBQStCa1FWTWRpcTM0ZW45MTB2S0orY0FBeTVhd2lwaEk3YTdCWEFkTjl1QTZkVmRKUkZKRlM5MW9BVmVEMU8wZ0EvQnc0TTRjcnlaQW5INWxhLzNieXVaWllXRFlvNmdjSElhRUdBaFNPSE9HU0VoeTNRYzA4Sy9mV3R5M2JiWVQvQ3lJQ1M0MDVvM2xScTUrM0RhbjE1bzYrU1FPa015dFZ3Mk1YcXZzNk1vdmJpMkt6VklmRGttcCt3NG5RajZBNkV2Ym5KenlEQkVBR1FFWWR6QndBRUl5TmdMOEgvNFl5OFRZL0pBQUVJV05JQUFoQ3hwQUFFSVNNSVFFZ0NCbERBa0FRTW9ZRWdDQmtEQWtBUWNnWUVnQ0NrREVrQUFRaFkwZ0FDRUxHa0FBUWhJd2hBU0FJR1VNQ1FCQXloZ1NBSUdRTUNRQkJ5QmdTQUlLUU1TUUFCQ0ZqU0FBSVFzYVFBQkNFakNFQklBZ1pRd0pBRURLR0JJQWdaQXdKQUVISUdCSUFncEF4SkFBRUlXTklBQWhDeHBBQUVJU01JUUVnQ0JsREFrQVFNb1lFZ0NCa0RBa0FRY2dZRWdDQ2tERWtBQVFoWTBnQUNFTEdrQUFRaEl3aEFTQUlHVU1DUUJBeWhnU0FJR1FNQ1FCQnlCZ1NBSUtRTVNRQUJDRmpTQUFJUXNhUUFCQ0VqQ0VCSUFnWlF3SkFFREtHQklBZ1pBd0pBRUhJR0JJQWdwQXhKQUFFSVdOSUFBaEN4cEFBRUlTTUlRRWdDQm56Ly9ZZE1DTU5NOXYrQUFBQUFFbEZUa1N1UW1DQ1wiLCAnYmFzZTY0J1xuICApXG5cbmlmIChmYWxzZSkge1xuICBjb25zdCBmaWxlU2l6ZUluTUIgPSBidWZmZXIuYnl0ZUxlbmd0aCAvIDEwMjQgLyAxMDI0XG4gIGlmIChmaWxlU2l6ZUluTUIgPiA4KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGaWxlIHNpemUgZm9yIE9wZW4gR3JhcGggaW1hZ2UgXCIvVXNlcnMvdmRhd3NvbjY0Ny9EZXNrdG9wL0tpY2tBZHMvUGFya1Nob3JlL1BhcmtTaG9yZS9hcHAvZmF2aWNvbi5pY29cIiBleGNlZWRzIDhNQi4gJyArXG4gICAgYChDdXJyZW50OiAke2ZpbGVTaXplSW5NQi50b0ZpeGVkKDIpfU1CKVxuYCArXG4gICAgJ1JlYWQgbW9yZTogaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2FwaS1yZWZlcmVuY2UvZmlsZS1jb252ZW50aW9ucy9tZXRhZGF0YS9vcGVuZ3JhcGgtaW1hZ2UjaW1hZ2UtZmlsZXMtanBnLXBuZy1naWYnXG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBHRVQoKSB7XG4gIHJldHVybiBuZXcgTmV4dFJlc3BvbnNlKGJ1ZmZlciwge1xuICAgIGhlYWRlcnM6IHtcbiAgICAgICdDb250ZW50LVR5cGUnOiBjb250ZW50VHlwZSxcbiAgICAgICdDYWNoZS1Db250cm9sJzogXCJwdWJsaWMsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlXCIsXG4gICAgfSxcbiAgfSlcbn1cblxuZXhwb3J0IGNvbnN0IGR5bmFtaWMgPSAnZm9yY2Utc3RhdGljJ1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-metadata-route-loader.js?filePath=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FParkShore%2FParkShore%2Fapp%2Ffavicon.ico&isDynamicRouteExtension=0!?__next_metadata_route__\n");

/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Ffavicon.ico%2Froute&page=%2Ffavicon.ico%2Froute&appPaths=&pagePath=private-next-app-dir%2Ffavicon.ico&appDir=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FParkShore%2FParkShore%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fvdawson647%2FDesktop%2FKickAds%2FParkShore%2FParkShore&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();